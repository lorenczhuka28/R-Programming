}
}
if(nr_cases > threshold){
correlation <- cor(df[ , "sulfate"], df[ , "nitrate"])
new[index] <- correlation
index <- index + 1
}
}
else if(i < 100){
df <- read.csv(paste("0", i, ".csv", sep = ""))
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
}
if(nr_cases > threshold){
correlation <- cor(df[ , "sulfate"], df[ , "nitrate"])
new[index] <- correlation
index <- index + 1
}
}
}
new
}
corr("specdata", 150)
NA == NA
corr <- function(directory, threshold = 0){
setwd(paste("C:/Users/HP/DataScience/DataScience-R-Course/R-Programming/", directory, sep = ""))
new <- vector("numeric")  # empty vector
index <- 1
for(i in 1:332){
nr_cases <- 0
if(i < 10){
df <- read.csv(paste("00", i, ".csv", sep = ""))
sulfate <- vector("numeric")
nitrate <- vector("numeric")
ind <- 1
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
if(!is.na(df[j, "sulfate"]) & !is.na(df[j, "nitrate"])){
sulfate[ind] <- df[j , "sulfate"]
nitrate[ind] <- df[j , "nitrate"]
ind <- ind + 1
}
}
if(nr_cases > threshold){
correlation <- cor(sulfate, nitrate)
new[index] <- correlation
index <- index + 1
}
}
else if(i < 100){
df <- read.csv(paste("0", i, ".csv", sep = ""))
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
}
if(nr_cases > threshold){
correlation <- cor(df[ , "sulfate"], df[ , "nitrate"])
new[index] <- correlation
index <- index + 1
}
}
}
new
}
corr <- function(directory, threshold = 0){
setwd(paste("C:/Users/HP/DataScience/DataScience-R-Course/R-Programming/", directory, sep = ""))
new <- vector("numeric")  # empty vector
index <- 1
for(i in 1:332){
nr_cases <- 0
sulfate <- vector("numeric")
nitrate <- vector("numeric")
if(i < 10){
df <- read.csv(paste("00", i, ".csv", sep = ""))
ind <- 1
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
if(!is.na(df[j, "sulfate"]) & !is.na(df[j, "nitrate"])){
sulfate[ind] <- df[j , "sulfate"]
nitrate[ind] <- df[j , "nitrate"]
ind <- ind + 1
}
}
if(nr_cases > threshold){
correlation <- cor(sulfate, nitrate)
new[index] <- correlation
index <- index + 1
}
}
else if(i < 100){
df <- read.csv(paste("0", i, ".csv", sep = ""))
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
if(!is.na(df[j, "sulfate"]) & !is.na(df[j, "nitrate"])){
sulfate[ind] <- df[j , "sulfate"]
nitrate[ind] <- df[j , "nitrate"]
ind <- ind + 1
}
}
if(nr_cases > threshold){
correlation <- cor(sulfate, nitrate)
new[index] <- correlation
index <- index + 1
}
}
}
new
}
corr("specdata", 150)
corr <- function(directory, threshold = 0){
setwd(paste("C:/Users/HP/DataScience/DataScience-R-Course/R-Programming/", directory, sep = ""))
new <- vector("numeric")  # empty vector
index <- 1
for(i in 1:332){
nr_cases <- 0
sulfate <- vector("numeric")
nitrate <- vector("numeric")
if(i < 10){
df <- read.csv(paste("00", i, ".csv", sep = ""))
ind <- 1
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
if(!is.na(df[j, "sulfate"]) & !is.na(df[j, "nitrate"])){
sulfate[ind] <- df[j , "sulfate"]
nitrate[ind] <- df[j , "nitrate"]
ind <- ind + 1
}
}
if(nr_cases > threshold){
if(length(sulfate) > 0 & length(nitrate) > 0){
correlation <- cor(sulfate, nitrate)
new[index] <- correlation
index <- index + 1
}
}
}
else if(i < 100){
df <- read.csv(paste("0", i, ".csv", sep = ""))
for(j in 1:nrow(df)){
row <- df[j, ]
na <- is.na(row)
if(any(na) == FALSE){
nr_cases <- nr_cases + 1
}
if(!is.na(df[j, "sulfate"]) & !is.na(df[j, "nitrate"])){
sulfate[ind] <- df[j , "sulfate"]
nitrate[ind] <- df[j , "nitrate"]
ind <- ind + 1
}
}
if(nr_cases > threshold){
if(length(sulfate) > 0 & length(nitrate) > 0){
correlation <- cor(sulfate, nitrate)
new[index] <- correlation
index <- index + 1
}
}
}
}
new
}
corr("specdata", 150)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate", 1:332)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc
cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
rm(list=ls())
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
y <- list(a = 1:4, b = rnorm(10), c = rnorm(100, 5))
lapply(y , mean)
y <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1) , d = rnorm(100, 5))
lapply(y , mean)
z <- 1:4
lapply(z, runif)
?runif
p <- 1:4
lapply(p, runif, min = 0, max = 10)
mat1 <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
mat <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
mat
lapply(mat, function(X) X[ , 1])
t <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(t, mean)
sapply(t, mean)
mean(t)
str(apply)
rm(list=ls())
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, quantile, probs = c(0.25, 0.75))
?array
rowMeans(a, dims=2)
apply(a, c(1,2), mean) # collapse the 3d dimension
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10)) # array with dimensions 2, 2, 10
apply(a, c(1,2), mean) # collapse the 3d dimension
rowMeans(a, dims=2)
str(mapply)
li <- list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
li
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(4, 1, 2)
noise(1:5, 1:5, 2)
# 1 normal ds value with mean 1, 2 normal ds values with mean 2 , 3 normal ds values with mean 3, 4 normal ds values with mean 4, 5 normal ds values with mean 5
mapply(noise, 1:5, 1:5)
# 1 normal ds value with mean 1, 2 normal ds values with mean 2 , 3 normal ds values with mean 3, 4 normal ds values with mean 4, 5 normal ds values with mean 5
mapply(noise, 1:5, 1:5, 2)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(10, 3)
f
f <- gl(3, 10)
f
tapply(x, f, mean)
# x is subsetting to 3 groups und tapply calculates mean of each group
tapply(x, f, mean, simplify = TRUE)
tapply(x, f, range)
str(split)
rm(list=ls())
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
split(x, f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airqualty$Month)
lapply(s, function(x) colMeans(x, c("Ozone", "Solar.R", "Wind")))
s <- split(airquality, airqualty$Month)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x, c("Ozone", "Solar.R", "Wind")))
lapply(s, function(x) colMeans(x, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[ , c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[ , c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[ , c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
var <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
interaction(f1, f2)
str(split(x , list(f1,f2)))
str(split(x , list(f1,f2), drop=TRUE))
log(-1)
printmessage <- function(x){
if(x > 0){
print("X greater than zero")
}
else{
print("X less or equal to zero")
}
unvisible(x)
}
printmessage(1)
printmessage <- function(x){
if(x > 0){
print("X greater than zero")
}
else{
print("X less or equal to zero")
}
invisible(x)
}
printmessage(1)
printmessage(NA)
var <- printmessage(2)
var
printmessage2 <- function(x){
if(is.na(x)){
print("X is NA")
}
else if(x > 0){
print("X greater than zero")
}
else{
print("X less or equal to zero")
}
invisible(x)
}
printmessage2(NA)
x <- log(-1)
printmessage2(x)
mean(my)
traceback()
mean(my)
traceback()
lm(y - x)
traceback()
debug(lm)
lm(y - x)
options(error = recover)
read.csv("nosuchfile")
2
2
0
0
0
0
0
sa
dec
sep
file
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flag[ , 11:17]
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flags, sum)
0
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- [ , 19:23]
flag_shapes <- flags[ , 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3, 4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flag, unique)
0
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(flags, length)
sapply(flags, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
getwd()
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
class(flags$population)
class(flags[ , "population"])
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
str(str)
str(ls)
summary(ls)
summary(x)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <- gl(4,7)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
s <- split(airquality, airquality$Month)
str(s)
str(dnorm)
str(pnorm)
str(qnorm)
str(rnorm)
x <- rnorm(10)
x
y1 <- rnorm(10, 20, 2)
y1
summary(y1)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
# cumulative distribution
ppois(2, 2) # probability that x<=2 where lambda=2
ppois(4, 2) # probability that x<=4 where lambda=2
ppois(6, 2) # probability that x<=6 where lambda=2
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x, y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0 ,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5) # letters is a character vector from a to z
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE) # permutation with replacement
sample(1:10, 4, replace=TRUE)
library(swirl)
swirl()
hist(cm)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot (x = cars$dist, y = cars$speed)
plot
plot(x= cars$speed, y = cars$dist, xlab = "speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, title = "My Plot")
plot(cars, main = "My Plot")
sd
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot()
b
boxplot(formula = "mpg ~ cyl")
boxplot(formula("mpg ~ cyl"))
boxplot(formula("mpg ~ cyl"), data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
library(datasets)
fit <- lm(y ~ x1 + x2)
Rprof()
x1 <- 1
x2 <- 2
y <- 3
$by.total
by.total
rm(list=ls())
x1 <- 1
x2 <- 2
y <- 3
summaryRprof()
fit <- lm(y ~ x1 + x2)
summaryRprof()
library(datasets)
summaryRprof()
